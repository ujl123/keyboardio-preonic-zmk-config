/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt {
};

#define PREONIC_ORTHO   1

/ {
    #if defined(PREONIC_ORTHO)

    chosen { zmk,matrix_transform = &ortho_transform; zmk,underglow = &led_strip;};


    #endif
&led_strip {
    chain-length = <4>;};
    combos {
        compatible = "zmk,combos";

        combo-quote {
            bindings = <&tapholdkp LS(SINGLE_QUOTE) SINGLE_QUOTE>;
            key-positions = <24 23>;
        };

        combo-dash {
            bindings = <&tapholdkp LS(MINUS) MINUS>;
            key-positions = <36 35 34>;
        };

        combo-enter {
            bindings = <&kp KP_ENTER>;
            key-positions = <34 35>;
        };

        combo-backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <34 33>;
        };

        combo-bracket {
            bindings = <&tapholdkp RIGHT_PARENTHESIS LEFT_PARENTHESIS>;
            key-positions = <34 23>;
        };

        combo-curlybracket {
            bindings = <&tapholdkp RIGHT_BRACE LEFT_BRACE>;
            key-positions = <34 24>;
        };

        combo-leftsquarebracket {
            bindings = <&tapholdkp RIGHT_BRACKET LEFT_BRACKET>;
            key-positions = <34 47>;
        };

        combo-pipe {
            bindings = <&tapholdkp LS(BACKSLASH) BACKSLASH>;
            key-positions = <34 21>;
        };

        combo-equal {
            bindings = <&tapholdkp LS(EQUAL) EQUAL>;
            key-positions = <34 36>;
        };

        combo-del {
            bindings = <&kp DEL>;
            key-positions = <33 34 57>;
        };

        combo-esc {
            bindings = <&kp ESC>;
            key-positions = <32 31>;
        };
    };

    behaviors {
        ctrlcapword: ctrlcapword {
            compatible = "zmk,behavior-hold-tap";
            label = "CTRLCAPWORD";
            bindings = <&kp>, <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        tapholdkp: tapholdkp {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDKP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <225>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
        };

        tapholdlayer: tapholdlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPHOLDLAYER";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&tog>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
                                                                                                                                                        &kp C_VOL_DN            &kp C_VOLUME_UP            &kp C_PLAY_PAUSE
&kp GRAVE             &kp N1             &kp N2         &kp N3    &kp N4     &kp N5       &kp N6                 &kp N7     &kp N8                      &kp N9                  &kp N0                     &kp HOME
&kp TAB               &kp Q              &kp W          &kp E     &kp R      &kp T        &kp Y                  &kp U      &tapholdkp LS(I) I          &kp O                   &kp P                      &kp PAGE_UP
&ctrlcapword LCTRL 0  &kp A              &kp S          &kp D     &kp F      &kp G        &kp H                  &kp J      &kp K                       &kp L                   &tapholdkp LS(SEMI) SEMI   &kp PAGE_DOWN
&kp LSHFT             &kp Z              &kp X          &kp C     &kp V      &kp B        &kp N                  &kp M      &tapholdkp LS(COMMA) COMMA  &tapholdkp LS(DOT) DOT  &tapholdkp LS(FSLH) SLASH  &kp END
&kp LCTRL             &kp LG(LA(SPACE))  &kp LG(LS(S))  &kp LALT  &kp SPACE  &lt 1 SPACE  &tapholdlayer 2 SPACE  &kp K_APP  &kp LEFT                    &kp DOWN_ARROW          &kp UP                     &kp RIGHT_ARROW
            >;

            sensor-bindings = <&inc_dec_kp A B>;
        };

        num_arrow {
            label = "numarrow";
            bindings = <
                                                                                                                                                                                               &kp C_PREVIOUS                    &kp C_NEXT  &trans
&kp F12  &kp F1          &kp F2          &kp F3                  &kp F4           &kp F5             &kp F6                &kp F7                            &kp F8                            &kp F9                            &kp F10     &kp F11
&trans   &sk LEFT_ALT    &kp HOME        &kp UP_ARROW            &kp END          &kp C_VOLUME_UP    &kp LS(PLUS)          &tapholdkp LS(N7) N7              &tapholdkp LS(N8) N8              &tapholdkp LS(N9) N9              &none       &none
&trans   &sk LEFT_SHIFT  &kp LEFT_ARROW  &kp DOWN_ARROW          &kp RIGHT_ARROW  &kp C_PLAY_PAUSE   &kp MINUS             &tapholdkp LS(N4) NUMBER_4        &tapholdkp LS(N5) N5              &tapholdkp LS(N6) NUMBER_6        &none       &none
&trans   &sk LCTRL       &kp PAGE_UP     &kp LS(LC(DOWN_ARROW))  &kp PAGE_DOWN    &kp C_VOLUME_DOWN  &kp DOT               &tapholdkp LS(NUMBER_1) NUMBER_1  &tapholdkp LS(NUMBER_2) NUMBER_2  &tapholdkp LS(NUMBER_3) NUMBER_3  &none       &none
&trans   &trans          &none           &trans                  &none            &none              &tapholdkp PERIOD N0  &tapholdkp PERIOD N0              &none                             &none                             &none       &none
            >;

            sensor-bindings = <&inc_dec_kp C_NEXT C_PREV>;
        };

        mouse_bt {
            bindings = <
                                                                                                                                     &bt BT_PRV     &bt BT_NXT     &bt BT_CLR
&none   &none          &none           &none           &none            &none           &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4   &none
&trans  &kp LS(LG(S))  &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &msc SCRL_UP    &bt BT_DISC 0   &bt BT_SEL 1  &bt BT_DISC 2  &bt BT_DISC 3  &bt BT_DISC 4  &none
&none   &mkp MB5       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &mkp MCLK       &none           &none         &none          &none          &none          &none
&trans  &mkp MB4       &kp LEFT_ARROW  &none           &kp RIGHT_ARROW  &msc SCRL_DOWN  &bt BT_CLR_ALL  &none         &none          &none          &none          &none
&trans  &trans         &trans          &trans          &none            &none           &to 0           &none         &none          &none          &none          &bootloader
            >;
        };
    };
};
